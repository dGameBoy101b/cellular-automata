#pragma once
#include "event.hpp"
#include "../../Data/position.hpp"

namespace SDL
{
	namespace Events
	{
		class MouseWheelEvent : public virtual Event
		{
		public:
			/** Initialiser constructor
			\param velocity The velocity of the scroll
			\param is_touch Whether this was generated by a touchscreen (defaults to false)
			\param is_flipped Whether the velocity should be flipped (defaults to false)
			*/
			MouseWheelEvent(const Data::Position<int32_t>& velocity, bool is_touch = false, bool is_flipped = false);
			/** Wrapper constructor
			\param event The SDL mouse wheel event
			*/
			MouseWheelEvent(const SDL_MouseWheelEvent& event);
			/** Converter constructor
			\param event The event to convert
			\throw std::invalid_argument The given event is not a mouse wheel event
			*/
			MouseWheelEvent(const Event& event);
			/** Velocity getter
			\return The velocity of the scrolling
			*/
			Data::Position<int32_t> getVelocity() const;
			/** Check if this event was generated by a touchscreen
			\return True when this was generated by a touchscreen
			\return False when this was generated by a mouse
			*/
			bool isTouch() const;
			/** Check if the velocity of this event has been flipped
			\return True when the velocity of this event has been flipped
			\return False when the velocity of this event has not been flipped
			*/
			bool isFlipped() const;
			/** Check if the given event has the same velocity as this
			\return True when the given event has the same velocity as this
			\return False when the given event has a deifferent velocity as this
			*/
			bool operator==(const MouseWheelEvent& other) const;
			/** Check if the given event has a different velocity as this
			\return True when the given event has a differen velocity as this
			\return False when the givne event has the same velocity as this
			*/
			bool operator!=(const MouseWheelEvent& other) const;
		};
	}
}
/** SDL::Events::MouseWheelEvent stream insertion
\param output The output stream to insert into
\param event The mouse wheel event to insert
*/
std::ostream& operator<<(std::ostream& output, const SDL::Events::MouseWheelEvent& event);
