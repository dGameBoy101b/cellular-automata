#pragma once
#include "event.hpp"
#include "../../Data/position.hpp"

namespace CellularAutomata
{
	namespace SDL
	{
		namespace Events
		{
			class MouseMotionEvent : public virtual Event
			{
			public:
				/** Initialiser constructor
				\param position The position of the mouse cursor relative to the window
				\param velocity The change in mouse position since the last mouse motion event
				\param is_touch Whether this event was generated by a touchscreen
				*/
				MouseMotionEvent(const Data::Position<int32_t>& position, const Data::Position<int32_t>& velocity, bool is_touch = false);
				/** Wrapper constructor
				\param event The sdl mouse motion event to wrap
				*/
				MouseMotionEvent(const SDL_MouseMotionEvent& event);
				/** Conversion constructor
				\param event The event to convert
				\throw std::invalid_argument The given event is not a mouse motion event
				*/
				MouseMotionEvent(const Event& event);
				/** Check whether this was generated by a touchscreen
				\return True when this was generated by a touchscreen
				\return False when this was generated by a mouse
				*/
				bool isTouch() const;
				/** Position getter
				\return The position of the mouse cursor relative to the foreground window
				*/
				Data::Position<int32_t> getPosition() const;
				/** Velocity getter
				\return The difference between the previous mouse position and the position reported by this event
				*/
				Data::Position<int32_t> getVelocity() const;
				/** Equals comparison
				\param other The other mouse motion event to compare
				\return True when the position and velocity of the given mouse motion event is equal to this
				\return False otherwise
				*/
				bool operator==(const MouseMotionEvent& other) const;
				/** Not equals comparison
				\param other The other mouse motion event to compare
				\return False when the position and velocity of the given mouse motion event is equal to this
				\return True otherwise
				*/
				bool operator!=(const MouseMotionEvent& other) const;
			};
		}
	}
}
/** Mouse motion event stream insertion
\param output The output stream to insert into
\param event The mouse motion event to insert
*/
std::ostream& operator<<(std::ostream& output, const CellularAutomata::SDL::Events::MouseMotionEvent& event);
